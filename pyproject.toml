[project]
name = "template-bind-cpp-python"
version = "0.0.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.10"
dependencies = ["typer>=0.16.0"]

[dependency-groups]
dev = [
    "commitizen>=4.8.3",
    "coverage>=7.10.1",
    "pyright[nodejs]>=1.1.403",
    "nox>=2025.5.1",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.3",
    "taskipy>=1.14.1",
    "pre-commit>=4.2.0",
]

[project.scripts]
bind-demo = "template_bind_cpp_python.cli:app"

[build-system]
# cmakeと連携してビルドするにはビルドシステムとしてscikit-build-coreを指定する必要がある
requires = ["scikit_build_core>=0.8.0", "nanobind"]
build-backend = "scikit_build_core.build"

[tool.scikit-build]
# nanobind settings
wheel.py-api = "cp312"

# Set default build type to Release for scikit-build-core
cmake.build-type = "Release"

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.0.0"
tag_format = "v$version"
version_scheme = "semver2"
update_changelog_on_bump = true
major_version_zero = true

[tool.pyright]
venvPath = "."
include = ["src"]
exclude = ["**/node_modules", "**/__pycache__"]
ignore = ["tests"]
defineConstant = { DEBUG = true }

[tool.ruff.format]
line-ending = "lf"
docstring-code-format = true
quote-style = "double"
indent-style = "space"

[tool.ruff]
line-length = 88
indent-width = 4
force-exclude = true
fix = true
exclude = ["ext/*"]

[tool.ruff.lint]
select = [
    "ANN",    # flake8-annotations
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "D",      # flake8-docstrings
    "E",      # pycodestyle errors
    "EM",     # flake8-errmsg
    "F",      # pyflakes
    "FA",     # flake8-future-annotations
    "FBT001", # flake8-boolean-trap
    "I",      # isort
    "ICN",    # flake8-import-conventions
    "INT",    # flake8-gettext
    "PERF",   # perflint
    "PIE",    # flake8-pie
    "PT",     # flake8-pytest-style
    "PTH",    # flake8-use-pathlib
    "PYI",    # flake8-pyi
    "RUF",    # ruff-specific rules
    "SIM",    # flake8-simplify
    "TC",     # flake8-type-checking
    "TD",     # flake8-todos
    "TID",    # flake8-tidy-imports
    "TRY",    # tryceratops
    "UP",     # pyupgrade
    "W",      # pycodestyle warnings
]

ignore = [
    "ANN401", # Dynamically typed expressions (Any) are disallowed
    "D400",   # First line should end with a period
    "D401",   # Relax NumPy docstring convention: first line should be imperative
    "D403",   # Checks for docstrings that do not start with a capital letter.
    "E501",   # Line length regulated by formatter
    "PT011",  # pytest.raises is too broad, set match or use a more specific exception
    "PYI021", # docstring-in-stub
    "PYI041", # Use float instead of int | float
    "RUF022", # `__all__` is not sorted
    "RUF005", # Consider expression instead of concatenation
    "SIM108", # Use ternary operator
    "SIM114", # Combine `if` branches
    "TD002",  # Missing author in TODO
    "TD003",  # Missing issue link on the line following this TODO
    "TRY003", # Avoid specifying long messages outside the exception class
]

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["D100", "D102", "D103", "B018", "FBT001"]
"__init__.py" = ["D100", "D104"]
"__main__.py" = ["D100", "D104"]
"__version__.py" = ["D100"]
"noxfile.py" = ["ANN", "D100", "D103", "D104"]

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.pytest.ini_options]
pythonpath = "src/template_bind_cpp_python"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
addopts = ["--strict-markers", "--strict-config"]

[tool.coverage.run]
source = ["src/**/*.py"]
branch = true

[tool.coverage.report]
skip_covered = false
show_missing = true
omit = ["tests/*", "noxfile.py", "**/__main__.py"]

[tool.taskipy.tasks]
# Python Quality Tasks
setup-py     = { cmd = "uv sync", help = "Set up Python development environment" }
build-py     = { cmd = "uv pip install -e .", help = "Build and install Python package in development mode" }
clean-py     = { cmd = "uv pip uninstall .", help = "Uninstall Python package" }
test-py      = { cmd = "uv run --frozen pytest --cov=src --cov-report=term", help = "Run Python tests with coverage" }
format-py    = { cmd = "uv run --frozen ruff format", help = "Format Python code with ruff" }
lint-py      = { cmd = "uv run --frozen ruff check --fix --show-fixes --exit-non-zero-on-fix", help = "Lint Python code with ruff" }
typecheck-py = { cmd = "uv run --frozen pyright", help = "Type check Python code" }
check-py     = { cmd = "task format-py && task lint-py && task typecheck-py && task test-py", help = "Run all Python quality checks" }

# C++ Quality Tasks
setup-cpp  = { cmd = "cmake -S . -B build && cp build/compile_commands.json ./", help = "Set up C++ development environment" }
build-cpp  = { cmd = "cmake -S . -B build && cmake --build build", help = "CMake build and copy compile_commands.json" }
clean-cpp  = { cmd = "rm -rf build/ && rm -f compile_commands.json", help = "Clean CMake build artifacts" }
test-cpp   = { cmd = "ctest --test-dir build --verbose", help = "Run C++ tests with ctest" }
format-cpp = { cmd = "cmake --build build --target format", help = "Format C++ code with clang-format" }
lint-cpp   = { cmd = "cmake --build build --target lint", help = "Lint C++ code with clang-tidy" }
cppcheck   = { cmd = "cmake --build build --target run-cppcheck", help = "Run cppcheck static analysis" }
check-cpp  = { cmd = "cmake --build build --target fullcheck", help = "Run all C++ quality checks" }

# Integrated Tasks
build  = { cmd = "task build-cpp && task build-py", help = "Build both C++ and Python components" }
clean  = { cmd = "task clean-cpp", help = "Clean all build artifacts" }
test   = { cmd = "task test-py && task test-cpp", help = "Run all tests (Python + C++)" }
format = { cmd = "task format-py && task format-cpp", help = "Format both Python and C++ code" }
lint   = { cmd = "task lint-py && task lint-cpp", help = "Lint both Python and C++ code" }
check  = { cmd = "task check-py && task check-cpp", help = "Run all quality checks for both languages" }

# Development Tools
pr       = { cmd = "prettier --write .", help = "Format with prettier" }
setup    = { cmd = "task setup-py && task setup-cpp", help = "Set up development environment" }
help-cpp = { cmd = "cmake --build build --target list-quality-targets", help = "List available CMake quality targets" }
